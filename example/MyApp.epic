module MyApp
  ( Wrapper, List, plusOne )

import MyApp.Helpers

type List a
  = Cons a (List a)
  | Nil

# Functions don't necessarily need to have the arguments in the definition.
plusOne : Int -> Int
plusOne = flip plus 1 # Here, we use 'plus' which is defined in MyApp.Helpers

# Because there is 'fix', we can create values which never return.
bottom : forall a b. a -> b
bottom = fix \f -> \x -> f x

bottom' : forall a. a
bottom' = fix \x -> x

type ListF a f
  = ConsF a f
  | NilF

type Wrapper f a = Wrapper (List (f a))

#wrong : Wrapper Int Int -> Int
good : Wrapper List Int -> Int
good = \w -> 4

sampleList : List Int
sampleList = Cons 1 (Cons 2 (Cons 3 Nil))

type Option a
  = Some a
  | None

head : forall a. List Int -> Option a
head = \l -> match l with
  Cons _ _ -> None
  Nil -> None
